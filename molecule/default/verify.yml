---
- name: Verify
  hosts: all
  gather_facts: false
  become: true

  pre_tasks:
    - name: Load default variables
      ansible.builtin.include_vars:
        file: "{{ lookup('env', 'MOLECULE_PROJECT_DIRECTORY') }}/defaults/main.yml"

  tasks:
    - name: Set tutor command path
      ansible.builtin.set_fact:
        tutor_cmd: "{{ tutor_bin_path }}/tutor"

    - name: Verify Tutor installation
      block:
        - name: Check tutor binary
          ansible.builtin.stat:
            path: "{{ tutor_cmd }}"
          register: tutor_binary

        - name: Get tutor version
          ansible.builtin.command: "{{ tutor_cmd }} --version"
          register: tutor_version_output
          changed_when: false
          become_user: "{{ tutor_user }}"
          environment:
            TUTOR_ROOT: "{{ tutor_config_path }}"
          when: tutor_binary.stat.exists

        - name: Assert tutor is installed correctly
          ansible.builtin.assert:
            that:
              - tutor_binary.stat.exists
              - tutor_binary.stat.executable
              - tutor_version in tutor_version_output.stdout
            fail_msg: "Tutor installation failed"

    - name: Verify Docker access for tutor user
      block:
        - name: Check Docker access
          ansible.builtin.command: docker ps
          register: docker_ps
          changed_when: false
          become_user: "{{ tutor_user }}"
          failed_when: false

        - name: Assert Docker is accessible
          ansible.builtin.assert:
            that:
              - docker_ps.rc == 0
            fail_msg: "Tutor user cannot access Docker"

    - name: Verify Tutor configuration
      block:
        - name: Check config file
          ansible.builtin.stat:
            path: "{{ tutor_config_path }}/config.yml"
          register: config_file

        - name: Get tutor config
          ansible.builtin.command: "{{ tutor_cmd }} config printvalue OPENEDX_COMMON_VERSION"
          register: openedx_version
          changed_when: false
          become_user: "{{ tutor_user }}"
          environment:
            TUTOR_ROOT: "{{ tutor_config_path }}"
          failed_when: false

        - name: Assert configuration is valid
          ansible.builtin.assert:
            that:
              - config_file.stat.exists
              - openedx_version.rc == 0
              - openedx_version.stdout | length > 0

    - name: Verify service file exists
      ansible.builtin.stat:
        path: /etc/systemd/system/tutor.service
      register: service_file
      
    - name: Assert service file created
      ansible.builtin.assert:
        that:
          - service_file.stat.exists
        success_msg: "Systemd service file created"